package logic;

import java.math.BigDecimal;
import java.math.MathContext;

import domain.Item;
import domain.Score;
import domain.State;
import utill.BDCalc;
import utill.BDLib;

public class ItemLogic implements ItemLogicI {
	private State state;
	private PurchasingLogicI purchasingLogic;
	private final static BigDecimal HUNDRED = new BigDecimal(100);
	private final static BigDecimal THOUSAND = new BigDecimal(1000);
	public ItemLogic(State state,PurchasingLogicI purchasingLogic) {
		this.state = state;
		this.purchasingLogic = purchasingLogic;
	} 
//	public void itemInit(Item item) {
//		item.baseIncome(this.baseIncome(item.index()));
//		item.basePrice(this.baseCost(item.index()));
//		item.priceIncrease(this.priceIncrease(item));
//	}
	public void updateItem(Item item) {
		item.incomeInterval(this.incomeInterval(item));
		item.speedMultiplier(this.speedMultiplier(item));
		item.income( this.income(item) );
		item.basePrice( baseCost(item.index()).multiply( baseCostMultiplier(item)) );
	}
	@Override
	public BigDecimal cost(Item i) {
		return BDCalc.multiply
				(
					BDCalc.multiply(
						baseCost(i.index()),
						baseCostMultiplier(i)
					),
					BDCalc.pow(
						percentagePriceIncrease(i),
						i.amount()+1
					)
				);
	}

	@Override
	public BigDecimal baseCost(int index) {
		return BDCalc.multiply
				(
					Item.priceBase,
					BDCalc.pow(Item.priceScale, index)
				);
	}
	@Override
	public BigDecimal baseCostMultiplier(Item i) {
		//5 percent decrease multiplicatively pr price upgrade
		return BDCalc.pow 
				(
					BDLib.priceUpgradeMultiplier,
					i.upgrades().price().amount()
				);
	}

	@Override
	public Score income(Item i) {
		//calculate baseIncome with multipliers, then multiply with amount of items
		return new Score(
					BDCalc.multiply(
						BDCalc.multiply(
								baseIncome(i.index()),
								baseIncomeMultiplier(i)
							),
						new BigDecimal(i.amount())
					)
				);
	}

	@Override
	public BigDecimal baseIncome(int index) {
		return BDCalc.multiply(
				Item.incomeBase,
				BDCalc.pow(Item.incomeBase,index)
			);
	}

	@Override
	public BigDecimal baseIncomeMultiplier(Item i) {
		BigDecimal withincomeUpgradeMultiplier = BDCalc.multiply(BigDecimal.ONE,incomeUpgradeMultiplier(i) );
		BigDecimal withResetCurrencyMultiplier = BDCalc.multiply(withincomeUpgradeMultiplier, state.resetCurrencyMultiplier());
		BigDecimal withUnlockedUpgradeMultiplier = BDCalc.multiply(withResetCurrencyMultiplier, unlockedUpgradeMultiplier(i));
		return withUnlockedUpgradeMultiplier;
	}

	@Override
	public BigDecimal priceIncrease(Item i) {
		return new BigDecimal(1.15);
	}

	@Override
	public BigDecimal percentagePriceIncrease(Item i) {
		
		return BDCalc.subtract(
				BDCalc.multiply(priceIncrease(i), BDLib.HUNDRED),
				BDLib.HUNDRED 
			);
	}

	@Override
	public BigDecimal speedMultiplier(Item i) {
		return BDCalc.pow(
				BDLib.SpeedUpgradeMultiplier,
				i.upgrades().speed().amount()
			);
		
	}

	@Override
	public BigDecimal baseIncomeInterval(Item i) {
		// returns the sum of the numbers from 1 to index.
		
		return BDCalc.multiply(
				BDCalc.multiply(
					new BigDecimal(i.index() +1),
					BDCalc.divide(
						new BigDecimal(i.index()),
						BDLib.TWO
					)
					.add(BigDecimal.ONE)
				), 
				BDLib.THOUSAND );
	}
	@Override
	public BigDecimal incomeInterval(Item i) {
		return BDCalc.divide(baseIncomeInterval(i), speedMultiplier(i));
	}
	@Override
	public BigDecimal incomePrSecond(Item i) {
		//income / incomeinterval = income pr ms
		//multiply that with 1000 to get income pr second
		return BDCalc.multiply(
				BDCalc.divide(
					income(i).val(),
					baseIncomeInterval(i)
			    ),
				BDLib.THOUSAND);
	}

	@Override
	public BigDecimal incomePrSecondPrItem(Item i) {
		//calculated by taking incomePrSecond and dividing it with amount of items
		if(i.amount() !=  0)
			return BDCalc.divide(
						incomePrSecond(i),
						new BigDecimal(i.amount())
					);
		else return BigDecimal.ZERO;
	}

	@Override
	public BigDecimal priceFor1IncomePrSecond(Item i) {
		//Cost / income = cost for 1 income
		if(i.amount() != 0)
			return BDCalc.divide(cost(i), income(i).val());
		else return cost(i);
	}
	private BigDecimal incomeUpgradeMultiplier(Item i) {
		return BDLib.IncomeUpgradeMultiplier.pow(i.upgrades().income().amount(),MathContext.DECIMAL64);
	}
	private BigDecimal unlockedUpgradeMultiplier(Item i) {
		return BDLib.UnlockedUpgradeMultiplier.pow(i.upgrades().unlocked().amount(),MathContext.DECIMAL64);
	}
	
	@Override
	public BigDecimal clickValueFrom(Item i) {
		BigDecimal clickValueFromUpgrades = BigDecimal.ZERO;
		clickValueFromUpgrades = 
		BDCalc.add(clickValueFromUpgrades,
			BDCalc.multiply(
				BDCalc.multiply(i.income().val(), BDLib.ItemClickUpgradeMultiplier),
				new BigDecimal(i.upgrades().click().amount())
			)
		);
		return clickValueFromUpgrades.setScale(5,BigDecimal.ROUND_HALF_EVEN);
	}
	@Override
	public void itemInit(Item item) {
		// TODO Auto-generated method stub
		
	}

}
